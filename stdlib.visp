(define not
  (lambda (val)
    (if val #f #t)))

(define or
  (lambda (a b)
    (if a #t
      (if b #t #f))))

(define and
  (lambda (a b)
    (if a
        (if b #t #f)
      #f)))

(define xor
  (lambda (a b)
    (if a
        (if b #f #t)
      (if b #t #f))))

(define >=
  (lambda (a b)
    (if (or (eq a b) (> a b))
        #t
      #f)))

(define <=
  (lambda (a b)
    (if (or (eq a b) (< a b))
        #t
      #f)))

(define sum
  (lambda (list)
    (if (empty list)
        0
      (+ (head list) (sum (tail list))))))

(define length
  (lambda (list)
    (if (empty list)
        0
      (+ 1 (length (tail list))))))

(define append
  (lambda (dest source)
    (if (empty dest)
        source
    (cons (head dest) (append (tail dest) source)))))

(define filter
  (lambda (fn list)
    (if (empty list)
        '()
      (if (fn (head list))
          (cons (head list) (filter fn (tail list)))
        (filter fn (tail list))))))

(define map
  (lambda (fn list)
    (if (empty list)
        '()
      (cons (fn (head list)) (map fn (tail list))))))

(define reverse
  (lambda (list)
    (if (empty list)
        '()
      (append (reverse (tail list))
              (cons (head list) '())))))
